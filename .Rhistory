Prestadores_Municipios$fecha_radicacion <- as.Date(as.character(Prestadores_Municipios$fecha_radicacion),format = "%Y%m%d")
Prestadores_Municipios
Prestadores_Municipios$fecha_radicacion
Prestadores_Municipios$fecha_vencimiento
base_datos <- dbConnect(SQLite(), "C:\\Users\\MARIO VARGAS\\Downloads\\Pruebas de trabajo 2024\\Prueba Adres\\bdprueba.db")
# Exploración de la tabla de Prestadores_Municipios
Prestadores_Municipios <- dbGetQuery(base_datos, "SELECT * FROM Prestadores_Municipios",encoding = "UTF-8")
#head(Prestadores_Municipios)
Prestadores_Municipios$fecha_vencimiento <- as.Date(as.character(Prestadores_Municipios$fecha_vencimiento), format = "%Y%m%d")
#Prestadores_Municipios$fecha_radicacion <- as.Date(as.character(Prestadores_Municipios$fecha_radicacion),format = "%Y%m%d")
Prestadores_Municipios$fecha_vencimiento
Prestadores_Municipios$fecha_vencimiento <- as.Date(as.character(Prestadores_Municipios$fecha_vencimiento), format = "%Y%m%d")
Prestadores_Municipios$fecha_radicacion <- as.Date(as.character(Prestadores_Municipios$fecha_radicacion),format = "%Y%m%d")
Prestadores_Municipios$fecha_vencimiento
# Exploración de la tabla de Prestadores_Municipios
Prestadores_Municipios <- dbGetQuery(base_datos, "SELECT * FROM Prestadores_Municipios",encoding = "UTF-8")
#head(Prestadores_Municipios)
Prestadores_Municipios$fecha_vencimiento <- as.Date(as.character(Prestadores_Municipios$fecha_vencimiento), format = "%Y%m%d")
#Prestadores_Municipios$fecha_radicacion <- as.Date(as.character(Prestadores_Municipios$fecha_radicacion),format = "%Y%m%d")
Prestadores_Municipios$fecha_vencimiento
Prestadores_Municipios$fecha_radicacion <- as.Date(as.character(Prestadores_Municipios$fecha_radicacion),format = "%Y%m%d")
Prestadores_Municipios$fecha_radicacion
Prestadores_Municipios
# Visualización de datos
hist(Prestadores_Municipios$Poblacion)  # Histograma de la población
barplot(table(Prestadores_Municipios$Region))  # Gráfico de barras para la regió
# Modelamiento estadístico
# Por ejemplo, ajustar un modelo de regresión lineal
modelo <- lm(Poblacion ~ Superficie + Irural, data = datos)
# Modelamiento estadístico
# Por ejemplo, ajustar un modelo de regresión lineal
modelo <- lm(Poblacion ~ Superficie + Irural, data = Prestadores_Municipios)
summary(modelo)  # Resumen del modelo
# Modelamiento estadístico
# Por ejemplo, ajustar un modelo de regresión lineal
datos_completos <- na.omit(datos)  # Eliminar filas con valores faltantes
# Modelamiento estadístico
# Por ejemplo, ajustar un modelo de regresión lineal
datos_completos <- na.omit(Prestadores_Municipio)  # Eliminar filas con valores faltantes
# Modelamiento estadístico
# Por ejemplo, ajustar un modelo de regresión lineal
datos_completos <- na.omit(Prestadores_Municipios)  # Eliminar filas con valores faltantes
modelo <- lm(Poblacion ~ Superficie + Irural, data = datos_completos)
summary(modelo)
datos_completos <- na.omit(Prestadores_Municipios)  # Eliminar filas con valores faltantes en las variables predictoras y la variable de respuesta
modelo <- lm(Poblacion ~ Superficie + Irural, data = datos_completos)
modelo <- lm(Poblacion ~ Superficie + Irural, data = datos, na.action = na.exclude)
modelo <- lm(Poblacion ~ Superficie + Irural, data = Prestadores_Municipios, na.action = na.exclude)
Prestadores_Municipios$Poblacion[is.na(Prestadores_Municipios$Poblacion)] <- mean(Prestadores_Municipios$Poblacion, na.rm = TRUE)  # Imputar valores faltantes en la variable de respuesta
Prestadores_Municipios$Superficie[is.na(Prestadores_Municipios$Superficie)] <- mean(Prestadores_Municipios$Superficie, na.rm = TRUE)  # Imputar valores faltantes en las variables predictoras
Prestadores_Municipios$Irural[is.na(Prestadores_Municipios$Irural)] <- mean(Prestadores_Municipios$Irural, na.rm = TRUE)  # Imputar valores faltantes en las variables predictoras
modelo <- lm(Poblacion ~ Superficie + Irural, data = datos)
Prestadores_Municipios$Poblacion[is.na(Prestadores_Municipios$Poblacion)] <- mean(Prestadores_Municipios$Poblacion, na.rm = TRUE)  # Imputar valores faltantes en la variable de respuesta
Prestadores_Municipios$Superficie[is.na(Prestadores_Municipios$Superficie)] <- mean(Prestadores_Municipios$Superficie, na.rm = TRUE)  # Imputar valores faltantes en las variables predictoras
Prestadores_Municipios$Irural[is.na(Prestadores_Municipios$Irural)] <- mean(Prestadores_Municipios$Irural, na.rm = TRUE)  # Imputar valores faltantes en las variables predictoras
modelo <- lm(Poblacion ~ Superficie + Irural, data = Prestadores_Municipios)
modelo
# Diagrama de dispersión condicional
ggplot(datos, aes(x = Superficie, y = Poblacion, color = Region)) +
geom_point() +
labs(x = "Superficie", y = "Población", color = "Región") +
theme_minimal()
# Diagrama de dispersión condicional
ggplot(Prestadores_Municipios, aes(x = Superficie, y = Poblacion, color = Region)) +
geom_point() +
labs(x = "Superficie", y = "Población", color = "Región") +
theme_minimal()
# Exploración de la tabla de Prestadores_Municipios
Prestadores_Municipios <- dbGetQuery(base_datos, "SELECT * FROM Prestadores_Municipios",encoding = "UTF-8")
#head(Prestadores_Municipios)
Prestadores_Municipios$fecha_vencimiento <- as.Date(as.character(Prestadores_Municipios$fecha_vencimiento), format = "%Y%m%d")
Prestadores_Municipios$fecha_vencimiento
Prestadores_Municipios$fecha_radicacion <- as.Date(as.character(Prestadores_Municipios$fecha_radicacion),format = "%Y%m%d")
#Prestadores_Municipios$fecha_radicacion
# 'Prestadores_Municipios' es mi dataframe y calcular la correlación entre las columnas numéricas
columnas_numericas <- Prestadores_Municipios[, sapply(Prestadores_Municipios, is.numeric)]
# Calcular la matriz de correlación
correlacion <- cor(columnas_numericas)
# Mostrar la matriz de correlación
print(correlacion)
summary(Prestadores_Municipios)  # Estadísticas resumidas
table(Prestadores_Municipios$depa_nombre)  # Frecuencia para depa_nombre
# Visualización de datos
hist(Prestadores_Municipios$Poblacion)  # Histograma de la población
barplot(table(Prestadores_Municipios$Region))  # Gráfico de barras para la región
# Diagrama de dispersión condicional
ggplot(Prestadores_Municipios, aes(x = Superficie, y = Poblacion, color = Region)) +
geom_point() +
labs(x = "Superficie", y = "Población", color = "Región") +
theme_minimal()
# Diagrama de barras apiladas
ggplotPrestadores_Municipios, aes(x = depa_nombre, fill = Region)) +
# Diagrama de barras apiladas
ggplot(Prestadores_Municipios, aes(x = depa_nombre, fill = Region)) +
geom_bar() +
labs(x = "Departamento", y = "Población", fill = "Región") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_minimal()
# Gráfico de densidad condicional
ggplot(Prestadores_Municipios, aes(x = Poblacion, fill = Region)) +
geom_density(alpha = 0.5) +
labs(x = "Población", fill = "Región") +
theme_minimal()
str(Prestadores_Municipios)
datos$Poblacion <- as.numeric(datos$Poblacion)
Prestadores_Municipios$Poblacion <- as.numeric(Prestadores_Municipios$Poblacion)
Prestadores_Municipios$Superficie <- as.numeric(Prestadores_Municipios$Superficie)
# Visualización de datos
hist(Prestadores_Municipios$Poblacion)  # Histograma de la población
barplot(table(Prestadores_Municipios$Region))  # Gráfico de barras para la región
# Diagrama de barras apiladas
ggplot(Prestadores_Municipios, aes(x = depa_nombre, fill = Region)) +
geom_bar() +
labs(x = "Departamento", y = "Población", fill = "Región") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_minimal()
# Gráfico de densidad condicional
ggplot(Prestadores_Municipios, aes(x = Poblacion, fill = Region)) +
geom_density(alpha = 0.5) +
labs(x = "Población", fill = "Región") +
theme_minimal()
# Diagrama de dispersión condicional
ggplot(Prestadores_Municipios, aes(x = Superficie, y = Poblacion, color = Region)) +
geom_point() +
labs(x = "Superficie", y = "Población", color = "Región") +
theme_minimal()
# Diagrama de dispersión condicional con facetas por departamento
ggplot(Prestadores_Municipios, aes(x = Superficie, y = Poblacion, color = Region)) +
geom_point() +
facet_wrap(~ depa_nombre) +  # Agregar facetas por departamento
labs(x = "Superficie", y = "Población", color = "Región") +
theme_minimal()
# Contar el número de observaciones por combinación de Region y depa_nombre
conteo <- table(Prestadores_Municipios$Region, Prestadores_Municipios$depa_nombre)
# Convertir la tabla de conteo en un dataframe
datos_conteo <- as.data.frame.table(conteo)
# Renombrar las columnas
colnames(datos_conteo) <- c("Region", "depa_nombre", "Count")
# Crear el gráfico de dispersión
ggplot(datos_conteo, aes(x = Region, y = depa_nombre, size = Count)) +
geom_point() +
scale_size_continuous(range = c(1, 10)) +  # Ajustar el rango del tamaño de los puntos
labs(x = "Region", y = "Departamento", size = "Cantidad de prestadores") +
theme_minimal()
# Contar el número de observaciones por combinación de Region y depa_nombre
conteo <- table(Prestadores_Municipios$Region, Prestadores_Municipios$depa_nombre)
# Convertir la tabla de conteo en un dataframe
datos_conteo <- as.data.frame.table(conteo)
# Renombrar las columnas
colnames(datos_conteo) <- c("Region", "depa_nombre", "Count")
# Crear el gráfico de dispersión
ggplot(datos_conteo, aes(x = Region, y = depa_nombre, size = Count)) +
geom_point() +
scale_size_continuous(range = c(1, 10)) +  # Ajustar el rango del tamaño de los puntos
labs(x = "Region", y = "Departamento", size = "Cantidad de prestadores") +
theme_minimal()
heme(axis.text.x = element_text(size = 8),  # Ajustar el tamaño de la fuente del eje x
axis.text.y = element_text(size = 8))  # Ajustar el tamaño de la fuente del eje y
# Contar el número de observaciones por combinación de Region y depa_nombre
conteo <- table(Prestadores_Municipios$Region, Prestadores_Municipios$depa_nombre)
# Convertir la tabla de conteo en un dataframe
datos_conteo <- as.data.frame.table(conteo)
# Renombrar las columnas
colnames(datos_conteo) <- c("Region", "depa_nombre", "Count")
# Crear el gráfico de dispersión con ejes más pequeños
ggplot(datos_conteo, aes(x = Region, y = depa_nombre, size = Count)) +
geom_point() +
scale_size_continuous(range = c(1, 10)) +  # Ajustar el rango del tamaño de los puntos
labs(x = "Region", y = "Departamento", size = "Cantidad de prestadores") +
theme_minimal() +
theme(axis.text.x = element_text(size = 8),  # Ajustar el tamaño de la fuente del eje x
axis.text.y = element_text(size = 8))  # Ajustar el tamaño de la fuente del eje y
# Crear el gráfico de dispersión con ejes más pequeños
ggplot(datos_conteo, aes(x = Region, y = depa_nombre, size = Count)) +
geom_point() +
scale_size_continuous(range = c(1, 10)) +  # Ajustar el rango del tamaño de los puntos
labs(x = "Region", y = "Departamento", size = "Cantidad de prestadores") +
theme_minimal() +
theme(axis.text.x = element_text(size = 2),  # Ajustar el tamaño de la fuente del eje x
axis.text.y = element_text(size = 2))  # Ajustar el tamaño de la fuente del eje y
# Crear el gráfico de dispersión con ejes más pequeños
ggplot(datos_conteo, aes(x = Region, y = depa_nombre, size = Count)) +
geom_point() +
scale_size_continuous(range = c(1, 10)) +  # Ajustar el rango del tamaño de los puntos
labs(x = "Region", y = "Departamento", size = "Cantidad de prestadores") +
theme_minimal() +
theme(axis.text.x = element_text(size = 5),  # Ajustar el tamaño de la fuente del eje x
axis.text.y = element_text(size = 5))  # Ajustar el tamaño de la fuente del eje y
ggsave("grafico_dispercion.png", plot = grafico, width = 10, height = 8, units = "in", dpi = 300)
# Crear el gráfico de dispersión con ejes más pequeños
grafico <-ggplot(datos_conteo, aes(x = Region, y = depa_nombre, size = Count)) +
geom_point() +
scale_size_continuous(range = c(1, 10)) +  # Ajustar el rango del tamaño de los puntos
labs(x = "Region", y = "Departamento", size = "Cantidad de prestadores") +
theme_minimal() +
theme(axis.text.x = element_text(size = 5),  # Ajustar el tamaño de la fuente del eje x
axis.text.y = element_text(size = 5))  # Ajustar el tamaño de la fuente del eje y
ggsave("grafico_dispercion.png", plot = grafico, width = 10, height = 8, units = "in", dpi = 300)
# Crear el gráfico de dispersión
ggplot(Prestadores_Municipios, aes(x = depa_nombre, y = clpr_nombre)) +
geom_point() +
labs(x = "Departamento", y = "Nombre del prestador") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotar etiquetas del eje x para mayor legibilidad
# Crear el gráfico de barras
ggplot(Prestadores_Municipios, aes(x = depa_nombre, fill = clpr_nombre)) +
geom_bar() +
labs(x = "Departamento", fill = "Nombre del prestador") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotar etiquetas del eje x para mayor legibilidad
# Calcular los 10 valores más comunes de clpr_nombre para cada depa_nombre
top_clpr_por_depa <- Prestadores_Municipios %>%
group_by(depa_nombre, clpr_nombre) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
slice(1:10)
# Crear el gráfico de barras horizontales
ggplot(top_clpr_por_depa, aes(x = reorder(clpr_nombre, -count), y = count, fill = depa_nombre)) +
geom_bar(stat = "identity") +
coord_flip() +  # Rotar las barras horizontalmente
labs(x = "Nombre del prestador", y = "Frecuencia", fill = "Departamento") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotar etiquetas del eje x para mayor legibilidad
# Calcular los 10 valores más comunes de clpr_nombre para cada depa_nombre
top_clpr_por_depa <- Prestadores_Municipios %>%
group_by(depa_nombre, clpr_nombre) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
slice(1:10)
# Crear el gráfico de barras horizontales
ggplot(top_clpr_por_depa, aes(x = reorder(clpr_nombre, -count), y = count, fill = depa_nombre)) +
geom_bar(stat = "identity") +
coord_flip() +  # Rotar las barras horizontalmente
labs(x = "Nombre del prestador", y = "Frecuencia", fill = "Departamento") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotar etiquetas del eje x para mayor legibilidad
# Calcular los 10 valores más comunes de clpr_nombre para cada depa_nombre
top_clpr_por_depa <- Prestadores_Municipios %>%
group_by(depa_nombre, clpr_nombre) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
slice(1:5)
# Crear el gráfico de barras horizontales
ggplot(top_clpr_por_depa, aes(x = reorder(clpr_nombre, -count), y = count, fill = depa_nombre)) +
geom_bar(stat = "identity") +
coord_flip() +  # Rotar las barras horizontalmente
labs(x = "Nombre del prestador", y = "Frecuencia", fill = "Departamento") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotar etiquetas del eje x para mayor legibilidad
library(dplyr)
# Crear el gráfico de barras verticales
ggplot(top_clpr_por_depa, aes(x = reorder(clpr_nombre, -count), y = count, fill = depa_nombre)) +
geom_bar(stat = "identity") +
labs(x = "Nombre del prestador", y = "Frecuencia", fill = "Departamento") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotar etiquetas del eje x para mayor legibilidad
# Calcular los 10 valores más comunes de clpr_nombre para cada depa_nombre
top_clpr_por_depa <- Prestadores_Municipios %>%
group_by(depa_nombre, clpr_nombre) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
slice(1:4)
library(dplyr)
# Crear el gráfico de barras verticales
ggplot(top_clpr_por_depa, aes(x = reorder(clpr_nombre, -count), y = count, fill = depa_nombre)) +
geom_bar(stat = "identity") +
labs(x = "Nombre del prestador", y = "Frecuencia", fill = "Departamento") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotar etiquetas del eje x para mayor legibilidad
# Calcular los 10 valores más comunes de clpr_nombre para cada depa_nombre
conteo <- Prestadores_Municipios %>%
group_by(depa_nombre, clpr_nombre, Depmun) %>%
summarise(Count = n()) %>%
arrange(desc(Count)) %>%
top_n(10, Count)
ggplot(conteo, aes(x = factor(Depmun), fill = clpr_nombre)) +
geom_bar() +
labs(x = "Depmun", y = "Frecuencia", fill = "Nombre del prestador") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  # Rotar etiquetas del eje x para mayor legibilidad
coord_flip()  # Rotar el gráfico para que las etiquetas del eje x estén en posición vertical
# Calcular los 10 valores más comunes de clpr_nombre para cada depa_nombre
conteo <- Prestadores_Municipios %>%
group_by(depa_nombre) %>%
summarise(Count = n()) %>%
arrange(desc(Count)) %>%
top_n(10, Count)
ggplot(conteo, aes(x = factor(Depmun), fill = clpr_nombre)) +
geom_bar() +
labs(x = "Depmun", y = "Frecuencia", fill = "Nombre del prestador") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  # Rotar etiquetas del eje x para mayor legibilidad
coord_flip()  # Rotar el gráfico para que las etiquetas del eje x estén en posición vertical
# Calcular los 10 valores más comunes de clpr_nombre para cada depa_nombre
conteo <- Prestadores_Municipios %>%
group_by(depa_nombre, clpr_nombre) %>%
summarise(Count = n()) %>%
arrange(desc(Count)) %>%
top_n(10, Count)
ggplot(conteo, aes(x = factor(depa_nombre), fill = clpr_nombre)) +
geom_bar() +
labs(x = "Departamento", y = "Frecuencia", fill = "Nombre del prestador") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotar etiquetas del eje x para mayor legibilidad
# Calcular los 10 valores más comunes de clpr_nombre para cada depa_nombre
conteo <- Prestadores_Municipios %>%
group_by(depa_nombre, clpr_nombre) %>%
summarise(Count = n()) %>%
arrange(desc(Count)) %>%
top_n(5, Count)
ggplot(conteo, aes(x = factor(depa_nombre), fill = clpr_nombre)) +
geom_bar() +
labs(x = "Departamento", y = "Frecuencia", fill = "Nombre del prestador") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotar etiquetas del eje x para mayor legibilidad
# Calcular los 10 valores más comunes de clpr_nombre para cada depa_nombre
conteo <- Prestadores_Municipios %>%
group_by(depa_nombre) %>%
summarise(Count = n()) %>%
arrange(desc(Count)) %>%
top_n(5, Count)
ggplot(conteo, aes(x = factor(depa_nombre), fill = clpr_nombre)) +
geom_bar() +
labs(x = "Departamento", y = "Frecuencia", fill = "Nombre del prestador") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotar etiquetas del eje x para mayor legibilidad
# Calcular los 10 valores más comunes de clpr_nombre para cada depa_nombre
conteo <- Prestadores_Municipios %>%
group_by(depa_nombre, clpr_nombre) %>%
summarise(Count = n()) %>%
arrange(desc(Count)) %>%
top_n(5, Count)
ggplot(conteo, aes(x = factor(depa_nombre), fill = clpr_nombre)) +
geom_bar() +
labs(x = "Departamento", y = "Frecuencia", fill = "Nombre del prestador") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotar etiquetas del eje x para mayor legibilidad
# Contar el número de observaciones por combinación de Region y depa_nombre
conteo <- table(Prestadores_Municipios$Region, Prestadores_Municipios$depa_nombre)
# Convertir la tabla de conteo en un dataframe
datos_conteo <- as.data.frame.table(conteo)
# Renombrar las columnas
colnames(datos_conteo) <- c("Region", "depa_nombre", "Count")
# Crear el gráfico de dispersión con ejes más pequeños
grafico <-ggplot(datos_conteo, aes(x = Region, y = depa_nombre, size = Count)) +
geom_point() +
scale_size_continuous(range = c(1, 10)) +  # Ajustar el rango del tamaño de los puntos
labs(x = "Region", y = "Departamento", size = "Cantidad de prestadores") +
theme_minimal() +
theme(axis.text.x = element_text(size = 5),  # Ajustar el tamaño de la fuente del eje x
axis.text.y = element_text(size = 5))  # Ajustar el tamaño de la fuente del eje y
library(dplyr)
# Contar la frecuencia de las combinaciones de depa_nombre y clase_persona
conteo <- Prestadores_Municipios %>%
group_by(depa_nombre, clase_persona) %>%
summarise(Count = n()) %>%
arrange(desc(Count)) %>%
top_n(10, Count)
# Crear el diagrama de torta
ggplot(conteo, aes(x = "", y = Count, fill = depa_nombre)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +  # Convertir el gráfico en un diagrama de torta
labs(fill = "Departamento") +
theme_void() +  # Eliminar elementos del tema para tener solo la torta
theme(legend.position = "right")  # Colocar la leyenda en la posición deseada
# Calcular la frecuencia de las combinaciones de depa_nombre y clase_persona
conteo <- Prestadores_Municipios %>%
group_by(depa_nombre, clase_persona) %>%
summarise(Count = n()) %>%
arrange(desc(Count)) %>%
top_n(10, Count)
# Calcular los porcentajes
conteo <- conteo %>%
group_by(depa_nombre) %>%
mutate(Porcentaje = (Count / sum(Count)) * 100) %>%
ungroup() %>%
arrange(desc(Porcentaje))
# Seleccionar las 10 combinaciones más grandes
conteo <- conteo[1:10, ]
# Crear el gráfico de torta
ggplot(conteo, aes(x = "", y = Porcentaje, fill = factor(clase_persona))) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(title = "Top 10 Combinaciones de Depa_nombre y Clase_persona",
fill = "Clase Persona",
y = "Porcentaje") +
theme_void() +
theme(legend.position = "right")
# Calcular la frecuencia de las combinaciones de depa_nombre y clase_persona
conteo <- Prestadores_Municipios %>%
group_by(depa_nombre, clase_persona) %>%
summarise(Count = n()) %>%
arrange(desc(Count))
# Seleccionar las 10 combinaciones más grandes en valores
top_10 <- conteo %>% top_n(10, Count)
# Crear el diagrama d
# Calcular la frecuencia de las combinaciones de depa_nombre y clase_persona
conteo <- Prestadores_Municipios %>%
group_by(depa_nombre, clase_persona) %>%
summarise(Count = n()) %>%
arrange(desc(Count))
# Seleccionar las 10 combinaciones más grandes en valores
top_10 <- conteo %>% top_n(10, Count)
# Crear el diagrama de torta
ggplot(top_10, aes(x = "", y = Count, fill = factor(depa_nombre))) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +  # Convertir el gráfico en un diagrama de torta
facet_wrap(~ clase_persona) +  # Separar por clase_persona
labs(x = NULL, y = NULL, fill = "Departamento") +  # Ajustar etiquetas
theme_void() +  # Eliminar elementos de tema
theme(legend.position = "bottom")  # Mover la leyenda a la parte inferior
Sys.setlocale(category = "LC_ALL", locale = "en_US.ISO8859-1")
install.packages("DBI")
install.packages("RODBC")
library(tidyverse)
library(DBI)
library(RODBC)
library(odbc)
library(RMySQL)
library(RSQLite)
library(readr)
write.csv2(Municipios, "C:/Users/MARIO VARGAS/Downloads/Pruebas de trabajo 2024/Prueba Adres/Municipios/Municipios.csv", row.names = FALSE, fileEncoding = "latin1")
install.packages("DBI")
install.packages("RODBC")
install.packages("odbc")
install.packages("RMySQL")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("RSQLite")
library(tidyverse)
library(DBI)
library(RODBC)
library(odbc)
library(RMySQL)
library(RSQLite)
library(readr)
install.packages("readr")
install.packages("readr")
library(readr)
Prestadores <- read_delim("C:/Users/MARIO VARGAS/Downloads/Pruebas de trabajo 2024/Prueba Adres/Prestadores/Prestadores", delim = ";", show_col_types = FALSE)
Prestadores <- read_delim("C:/Users/MARIO VARGAS/Downloads/Pruebas de trabajo 2024/Prueba Adres/Prestadores/Prestadores.csv", delim = ";", show_col_types = FALSE)
head(Municipios)
Prestadores <- read_delim("C:/Users/MARIO VARGAS/Downloads/Pruebas de trabajo 2024/Prueba Adres/Prestadores/Prestadores.csv", delim = ";", show_col_types = FALSE)
head(Prestadores)
cat("Fuente Arial, 12 puntos\n")
library(DBI)
# Establecer conexión con la base de datos SQLite
base_datos <- dbConnect(SQLite(), "C:/Users/MARIO VARGAS/Downloads/Pruebas de trabajo 2024/Prueba Adres/bdprueba.db")
install.packages("DBI")
install.packages("RODBC")
library(DBI)
# Establecer conexión con la base de datos SQLite
base_datos <- dbConnect(SQLite(), "C:/Users/MARIO VARGAS/Downloads/Pruebas de trabajo 2024/Prueba Adres/bdprueba.db")
install.packages("DBI")
install.packages("RODBC")
install.packages("odbc")
install.packages("RMySQL")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("RSQLite")
install.packages("readr")
library(tidyverse)
library(DBI)
library(RODBC)
library(odbc)
library(RMySQL)
library(RSQLite)
library(readr)
library(DBI)
# Establecer conexión con la base de datos SQLite
base_datos <- dbConnect(SQLite(), "C:/Users/MARIO VARGAS/Downloads/Pruebas de trabajo 2024/Prueba Adres/bdprueba.db")
# Verifica la conexión
dbListTables( base_datos,encoding = "latin1")
# Exploración de la tabla de Prestadores_Municipios con divipola
Prestadores_Municipios <- dbGetQuery(base_datos, "SELECT * FROM Prestadores_Municipios_divipola",encoding = "latin1")
##Visualización grafico de torta para identificar el tipo de nombre de la categoria clpr_nombre
# Agrupar por clpr_nombre y nits_nit, y contar las ocurrencias
conteo <- count(Prestadores_Municipios, clpr_nombre, nits_nit)
# Crear el diagrama de torta
diagrama_torta <- ggplot(conteo, aes(x = "", y = n, fill = clpr_nombre)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +  # Coordenadas polares para convertir el grofico en un diagrama de torta
labs(title = "Distribucion de clpr_nombre", fill = "clpr_nombre") +
theme_void() +  # Eliminar elementos del tema para mostrar solo el diagrama de torta
theme(legend.position = "right")  # Posicion de la leyenda
# Mostrar el diagrama de torta
print(diagrama_torta)
##Visualización grafico de torta para identificar el tipo de nombre de la categoria clpr_nombre
# Agrupar por clpr_nombre y nits_nit, y contar las ocurrencias
conteo <- count(Prestadores_Municipios, clpr_nombre, nits_nit)
diagrama_torta <- ggplot(conteo, aes(x = "", y = n, fill = clpr_nombre, label = n)) +
geom_bar(stat = "identity", width = 1) +
geom_text(aes(label = n), position = position_stack(vjust = 0.5), size = 4) +  # Agregar etiquetas de texto con los valores
coord_polar("y", start = 0) +
labs(title = "Distribucion de clpr_nombre", fill = "clpr_nombre") +
theme_void() +
theme(legend.position = "right")
# Mostrar el diagrama de torta con valores
print(diagrama_torta)
# Calcular los porcentajes
conteo <- conteo %>%
mutate(porcentaje = n / sum(n) * 100)
# Crear el diagrama de torta con etiquetas de porcentaje
diagrama_torta <- ggplot(conteo, aes(x = "", y = n, fill = clpr_nombre, label = paste0(round(porcentaje, 1), "%"))) +
geom_bar(stat = "identity", width = 1) +
geom_text(aes(label = paste0(round(porcentaje, 1), "%")), position = position_stack(vjust = 0.5), size = 4) +  # Agregar etiquetas de texto con los porcentajes
coord_polar("y", start = 0) +
labs(title = "Distribucion de clpr_nombre", fill = "clpr_nombre") +
theme_void() +
theme(legend.position = "right")
# Mostrar el diagrama de torta con porcentajes
print(diagrama_torta)
